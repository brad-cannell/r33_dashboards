{"title":"DETECT Tool Pilot","markdown":{"yaml":{"title":"DETECT Tool Pilot","format":"dashboard","scrolling":true},"headingText":"Libraries","containsRefs":false,"markdown":"\n\n```{r, include = FALSE}\nlibrary(here)\nlibrary(dplyr)\nlibrary(flextable)\nlibrary(officer)\n```\n\n```{r, include = FALSE}\n# Load data\ndata_path <- here::here(\"data\", \"detect_tool_pilot.RDS\")\npilot_data <- readRDS(data_path)\nlink_data <- readRDS(here::here(\"data\", \n                               \"detect_tool_pilot_link_hits_long_format.RDS\"))\n\nvar_desc <- readRDS(here::here(\"data\", \n                               \"detect_tool_pilot_variable_descriptions.RDS\"))\n\n# Load functions\nsource(here::here(\"r\", \"format_table.R\"))\n```\n\n#  {.sidebar}\n\n<!-- Create Sidebar -->\n\n```{r, echo=FALSE}\nhead_1 <- \"This dashboard displays statistics for:\\n\\n\"\n\ndata.frame(\n  names = c(\"File Name\", \"Last Modified\"),\n  values = c(basename(data_path), format(Sys.time(), \"%Y-%m-%d %H:%M %Z\"))\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.3), unit = \"in\") %>%\n  add_header_lines(head_1) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n```{r, echo=FALSE}\nsubjects <- pilot_data %>% select(ri_patient_mrn) %>% unique() %>% nrow()\nclinicians <- pilot_data %>% select(ri_clinician_name) %>% unique() %>% nrow()\nsurvey_responses <- pilot_data %>% nrow()\ntime_period <- paste(min(as.Date(pilot_data$ri_date)), \"to\", \n                     max(as.Date(pilot_data$ri_date)))\n\nhead_2 <- \"This data references:\\n\\n\"\n\ndata.frame(\n  names = c(\"Subjects\", \"Clinicians\", \"Survey Responses\", \"Time Period\"),\n  values = c(subjects, clinicians, survey_responses, time_period)\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.2), unit = \"in\") %>%\n  add_header_lines(head_2) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n# All\n\n```{r, include=FALSE}\nscreening_items <- c(\"ri_necessities\", \"ri_environment\", \"ri_caregiver\", \"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\nscreening_items_opt <- c(\"ri_caregiver_un_reason\")\n\nscreening_items_tb <- c(\"ri_environment_un_reason\", \"ri_caregiver_oth\", \"ri_patient_assess\")\n\nem_status_opt <- c(\"ri_em_no_reason\", \"ri_em_reason\")\n\nem_type <- c(\"ri_em_type_1\", \"ri_em_type_2\", \"ri_em_type_3\", \"ri_em_type_4\", \"ri_em_type_5\", \"ri_em_type_6\", \"ri_em_type_7\", \"ri_em_type_98\", \"ri_em_type_99\")\n\ntext_boxes <- c(screening_items_tb, em_status_opt, \"ri_em_type_other\",  \"ri_aps_no_reason\", \n        \"ri_refer_svcs_specify\", \"ri_reflection_notes\")\n\nstatus_response <- c(\"suspect_em\", \"ri_report\", \"r_refer_svcs\", \"ri_reflection\")\n  \n# \"ri_report\", \"ri_aps_no_reason\", \"r_refer_svcs\", \"ri_refer_svcs_specify\",\n# \"ri_reflection\", \"r_refer_svcs\"\n\n\n```\n\n```{r, include = FALSE}\nformatted_flex <- function(df, header_list){\n  df %>% flextable() %>%\n  set_header_labels(values = header_list) %>%\n  width(j = c(1,2), width = c(2.5, 1.5), unit = \"in\")%>%\n  # Align body\n  align(j = -c(1,2), part = \"all\", align = \"center\") %>%\n  bold(part = \"header\") %>%\n  border_remove() %>%\n  hline(part = \"header\", border = fp_border(color = \"#ededed\",\n                                            width = 2)) %>%\n  hline(part = \"body\", border = fp_border(color = \"#ededed\")) %>%\n  colformat_num(\n  na_str = \"N/A\"\n)\n}\n\nmerge_custom <- function(ft, x, columns){\n  z <- rle(x)\n  rows_at <- cumsum(z$lengths) - z$lengths + 1\n\n  for(i in seq_along(rows_at)){\n    for(j in columns)\n      ft <- merge_at(x = ft, i = seq( rows_at[i], rows_at[i] + z$lengths[i] - 1), \n                     j = j)\n  }\n\n  ft\n}\n```\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = subjects\n)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n\nstarted_screenings <- pilot_data %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- pilot_data %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- pilot_data %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n<!-- One of the days (11/11) could not be viewed. This impacted the reporting guidelines for TX link. The number of clicks could have either any number from 0 to 3 for that day.-->\n\n```{r}\n#| echo: false\n#| title: Link Clicks\n#| content: valuebox\n\nlink_clicks <- link_data %>% filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = link_clicks\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- pilot_data %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- pilot_data %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- pilot_data %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- pilot_data %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# Baylor\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nbaylor_pd <- pilot_data %>% \n  filter(ri_institution == \"Baylor College of Medicine - BT House Calls\")\n\nunique_baylor <- baylor_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_baylor\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- baylor_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- baylor_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- baylor_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- baylor_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- baylor_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- baylor_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- baylor_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# Johns Hopkins\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\njh_pd <- pilot_data %>% \n  filter(ri_institution == \"Johns Hopkins - JHOME\")\n\nunique_jh <- jh_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_jh\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- jh_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- jh_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- jh_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- jh_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- jh_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- jh_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- jh_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UCSF\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nucsf_pd <- pilot_data %>% \n  filter(ri_institution == \"UCSF - Care at Home Program\")\n\nunique_ucsf <- ucsf_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_ucsf\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- ucsf_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- ucsf_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- ucsf_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- ucsf_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- ucsf_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- ucsf_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- ucsf_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UAB\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nuab_pd <- pilot_data %>% \n  filter(ri_institution == \"University of Alabama - UAB House Calls\")\n\nunique_uab <- uab_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_uab\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- uab_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- uab_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- uab_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- uab_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- uab_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- uab_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- uab_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n# UTSW\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nutsw_pd <- pilot_data %>% \n  filter(ri_institution == \"UT Southwestern - COVE\")\n\nunique_utsw <- utsw_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_utsw\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- utsw_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- utsw_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- utsw_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- utsw_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- utsw_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- utsw_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- utsw_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n# LBJ\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nlbj_pd <- pilot_data %>% \n  filter(ri_institution == \"UTH Houston - LBJ House Calls\")\n\nunique_lbj <- lbj_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_lbj\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- lbj_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- lbj_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- lbj_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- lbj_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- lbj_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- lbj_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- lbj_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UTP\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nutp_pd <- pilot_data %>% \n  filter(ri_institution == \"UTH Houston - UT Physicians House Calls\")\n\nunique_utp <- utp_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_utp\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- utp_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- utp_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- utp_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- utp_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- utp_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- utp_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- utp_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n","srcMarkdownNoYaml":"\n\n```{r, include = FALSE}\n# Libraries\nlibrary(here)\nlibrary(dplyr)\nlibrary(flextable)\nlibrary(officer)\n```\n\n```{r, include = FALSE}\n# Load data\ndata_path <- here::here(\"data\", \"detect_tool_pilot.RDS\")\npilot_data <- readRDS(data_path)\nlink_data <- readRDS(here::here(\"data\", \n                               \"detect_tool_pilot_link_hits_long_format.RDS\"))\n\nvar_desc <- readRDS(here::here(\"data\", \n                               \"detect_tool_pilot_variable_descriptions.RDS\"))\n\n# Load functions\nsource(here::here(\"r\", \"format_table.R\"))\n```\n\n#  {.sidebar}\n\n<!-- Create Sidebar -->\n\n```{r, echo=FALSE}\nhead_1 <- \"This dashboard displays statistics for:\\n\\n\"\n\ndata.frame(\n  names = c(\"File Name\", \"Last Modified\"),\n  values = c(basename(data_path), format(Sys.time(), \"%Y-%m-%d %H:%M %Z\"))\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.3), unit = \"in\") %>%\n  add_header_lines(head_1) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n```{r, echo=FALSE}\nsubjects <- pilot_data %>% select(ri_patient_mrn) %>% unique() %>% nrow()\nclinicians <- pilot_data %>% select(ri_clinician_name) %>% unique() %>% nrow()\nsurvey_responses <- pilot_data %>% nrow()\ntime_period <- paste(min(as.Date(pilot_data$ri_date)), \"to\", \n                     max(as.Date(pilot_data$ri_date)))\n\nhead_2 <- \"This data references:\\n\\n\"\n\ndata.frame(\n  names = c(\"Subjects\", \"Clinicians\", \"Survey Responses\", \"Time Period\"),\n  values = c(subjects, clinicians, survey_responses, time_period)\n) %>% flextable() %>%\n  delete_part(part = \"header\") %>%\n  bold(j = 1, part = \"body\") %>%\n  border_remove() %>%\n  width(j = c(1,2), width = c(1.2, 1.2), unit = \"in\") %>%\n  add_header_lines(head_2) %>%\n  color(j = c(1,2), color = \"#6c757d\", part = \"body\") %>%\n  color(i = c(1), color = \"#6c757d\", part = \"header\") %>%\n  bg(bg = \"#ffffff\", part = \"body\") %>%\n  hline(part = \"body\", border = fp_border(color = \"#f3f3f3\")) %>%\n  height_all(height = 0.5, unit = \"in\") %>%\n  hrule(rule = \"exact\")\n\n```\n\n# All\n\n```{r, include=FALSE}\nscreening_items <- c(\"ri_necessities\", \"ri_environment\", \"ri_caregiver\", \"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\nscreening_items_opt <- c(\"ri_caregiver_un_reason\")\n\nscreening_items_tb <- c(\"ri_environment_un_reason\", \"ri_caregiver_oth\", \"ri_patient_assess\")\n\nem_status_opt <- c(\"ri_em_no_reason\", \"ri_em_reason\")\n\nem_type <- c(\"ri_em_type_1\", \"ri_em_type_2\", \"ri_em_type_3\", \"ri_em_type_4\", \"ri_em_type_5\", \"ri_em_type_6\", \"ri_em_type_7\", \"ri_em_type_98\", \"ri_em_type_99\")\n\ntext_boxes <- c(screening_items_tb, em_status_opt, \"ri_em_type_other\",  \"ri_aps_no_reason\", \n        \"ri_refer_svcs_specify\", \"ri_reflection_notes\")\n\nstatus_response <- c(\"suspect_em\", \"ri_report\", \"r_refer_svcs\", \"ri_reflection\")\n  \n# \"ri_report\", \"ri_aps_no_reason\", \"r_refer_svcs\", \"ri_refer_svcs_specify\",\n# \"ri_reflection\", \"r_refer_svcs\"\n\n\n```\n\n```{r, include = FALSE}\nformatted_flex <- function(df, header_list){\n  df %>% flextable() %>%\n  set_header_labels(values = header_list) %>%\n  width(j = c(1,2), width = c(2.5, 1.5), unit = \"in\")%>%\n  # Align body\n  align(j = -c(1,2), part = \"all\", align = \"center\") %>%\n  bold(part = \"header\") %>%\n  border_remove() %>%\n  hline(part = \"header\", border = fp_border(color = \"#ededed\",\n                                            width = 2)) %>%\n  hline(part = \"body\", border = fp_border(color = \"#ededed\")) %>%\n  colformat_num(\n  na_str = \"N/A\"\n)\n}\n\nmerge_custom <- function(ft, x, columns){\n  z <- rle(x)\n  rows_at <- cumsum(z$lengths) - z$lengths + 1\n\n  for(i in seq_along(rows_at)){\n    for(j in columns)\n      ft <- merge_at(x = ft, i = seq( rows_at[i], rows_at[i] + z$lengths[i] - 1), \n                     j = j)\n  }\n\n  ft\n}\n```\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = subjects\n)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n\nstarted_screenings <- pilot_data %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- pilot_data %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- pilot_data %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n<!-- One of the days (11/11) could not be viewed. This impacted the reporting guidelines for TX link. The number of clicks could have either any number from 0 to 3 for that day.-->\n\n```{r}\n#| echo: false\n#| title: Link Clicks\n#| content: valuebox\n\nlink_clicks <- link_data %>% filter(hits >= 1) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"link\",\n  color = \"vb-blue\",\n  value = link_clicks\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- pilot_data %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- pilot_data %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- pilot_data %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- pilot_data %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# Baylor\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nbaylor_pd <- pilot_data %>% \n  filter(ri_institution == \"Baylor College of Medicine - BT House Calls\")\n\nunique_baylor <- baylor_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_baylor\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- baylor_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- baylor_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- baylor_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- baylor_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- baylor_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- baylor_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- baylor_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# Johns Hopkins\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\njh_pd <- pilot_data %>% \n  filter(ri_institution == \"Johns Hopkins - JHOME\")\n\nunique_jh <- jh_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_jh\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- jh_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- jh_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- jh_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- jh_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- jh_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- jh_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- jh_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UCSF\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nucsf_pd <- pilot_data %>% \n  filter(ri_institution == \"UCSF - Care at Home Program\")\n\nunique_ucsf <- ucsf_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_ucsf\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- ucsf_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- ucsf_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- ucsf_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- ucsf_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- ucsf_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- ucsf_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- ucsf_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UAB\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nuab_pd <- pilot_data %>% \n  filter(ri_institution == \"University of Alabama - UAB House Calls\")\n\nunique_uab <- uab_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_uab\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- uab_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- uab_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- uab_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- uab_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- uab_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- uab_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- uab_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n# UTSW\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nutsw_pd <- pilot_data %>% \n  filter(ri_institution == \"UT Southwestern - COVE\")\n\nunique_utsw <- utsw_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_utsw\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- utsw_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- utsw_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- utsw_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- utsw_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- utsw_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- utsw_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- utsw_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n# LBJ\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nlbj_pd <- pilot_data %>% \n  filter(ri_institution == \"UTH Houston - LBJ House Calls\")\n\nunique_lbj <- lbj_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_lbj\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- lbj_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- lbj_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- lbj_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- lbj_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- lbj_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- lbj_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- lbj_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n# UTP\n\n## Row {height= \"20%\" .fill}\n\n```{r}\n#| echo: false\n#| title: Unique MRNs\n#| content: valuebox\n\nutp_pd <- pilot_data %>% \n  filter(ri_institution == \"UTH Houston - UT Physicians House Calls\")\n\nunique_utp <- utp_pd %>% \n  select(ri_patient_mrn) %>% distinct() %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"person\",\n  color = \"vb-blue\",\n  value = unique_utp\n)\n\n# table(pilot_data$ri_institution)\n```\n\n<!-- Started screening is defined as a response for any of the screening items (Yes, No or Unable to assess) without considering any branching logic questions. -->\n\n```{r}\n#| echo: false\n#| title: Screenings Started\n#| content: valuebox\n#| \n\nstarted_screenings <- utp_pd %>% filter(if_any(\n  .cols = c(all_of(screening_items)),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"ui-checks-grid\",\n  color = \"vb-blue\",\n  value = started_screenings\n)\n```\n\n<!-- Completed screening is defined as a response for each of the screening items (Yes, No or Unable to assess) and status impression (Yes or No) without considering any branching logic questions. -->\n```{r}\n#| echo: false\n#| title: Screenings Completed\n#| content: valuebox\n\ncompleted_screenings <- utp_pd %>% filter(if_all(\n  .cols = c(all_of(screening_items), suspect_em),\n  .fns = ~!is.na(.x)\n)) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"check2-circle\",\n  color = \"vb-blue\",\n  value = completed_screenings\n)\n```\n\n```{r}\n#| echo: false\n#| title: Screening Items Complete but EM Status Impression Incomplete\n#| content: valuebox\n\nem_status_incomplete <- utp_pd %>% filter(if_all(\n  .cols = all_of(screening_items),\n  .fns = ~ !is.na(.x)\n)) %>% filter(is.na(suspect_em )) %>% nrow()\n\n# Create value box  \nlist(\n  icon = \"clipboard2-x\",\n  color = \"vb-blue\",\n  value = em_status_incomplete\n)\n```\n\n## Row\n\n### Column {.tabset}\n\n```{r, echo = FALSE}\n#| title: Screening Tool Responses\n\n# Set header labels\nh_list <- list(label = \"Screening Items\", responses = \"Responses\",\n               count = \"Count\")\n\nsi_summary <- utp_pd %>%\n  # Convert character response columns to factor columns.\n  mutate(\n    across(\n      .cols = all_of(screening_items),\n      .fns = ~factor(.x, levels = c(\"Yes\", \"No\", \"Unable to assess\"))\n    )\n  ) %>% select(record_id, all_of(screening_items)) %>%\n  \n  # Convert to long format from long format so all screening item names are in one\n  # column and all responses are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"screening_items\", \n                      values_to = \"responses\") %>%\n  \n  # Summarize with count for each screening item response\n  reframe(\n    screening_items, responses, \n    count = n(),\n    .by = c(screening_items, responses)\n  ) %>% distinct() %>% arrange(screening_items, responses) %>%\n  \n  # Include count for factor levels that have zero counts\n  tidyr::complete(screening_items, responses) %>%\n  mutate(count = tidyr::replace_na(count, 0)) %>%\n  \n  # Add cummulative sum and percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% paste0(\"%\"),\n    .by = screening_items\n  ) %>% left_join(var_desc, by = c(\"screening_items\" = \"variable\")) %>%\n  select(label, responses, count, Percent)\n  \n\n\nformatted_flex(si_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = si_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n```{r, echo = FALSE}\n#| title: Text Box Completion Based on Preceeding Questions\n\n# Set header labels\nh_list <- list(label = \"Text box items\", filled = \"Filled\",\n               count = \"Count\", totals = \"Totals\")\n\nenvironment_items <- c(\"ri_environment\", \"ri_necessities\")\n\nrelevant_vars <- c(\"ri_report\", \"ri_caregiver\", \"ri_caregiver_un_reason\", screening_items, \n  \"suspect_em\", \"ri_environment\", \"r_refer_svcs\", \"ri_reflection\", \"ri_em_type_98\")\n\npatient_assessment_items <- c(\"ri_sedated\", \"ri_isolated\", \"ri_anxious\", \n                              \"ri_prohibited\", \"ri_unmet_needs\", \"ri_injuries\")\n\ntotal_count <- utp_pd %>%\n  select(c(record_id, all_of(relevant_vars))) %>%\n  reframe(\n    ri_aps_no_reason = sum(ri_report == 0, na.rm = TRUE),\n    ri_caregiver_oth = sum(ri_caregiver == \"Unable to assess\" &\n                                 ri_caregiver_un_reason == 98, na.rm = TRUE),\n    ri_em_no_reason = sum(if_any(.cols = all_of(screening_items),\n                             .fns = ~.x == \"Yes\") & suspect_em == 0, \n                             na.rm = TRUE),\n    ri_em_reason = sum(suspect_em == 1 & if_all(.cols = all_of(screening_items),\n                                                .fns = ~.x != \"Yes\"), \n                           na.rm = TRUE),\n    ri_em_type_other = sum(ri_em_type_98 == 1, na.rm = TRUE),\n    ri_environment_un_reason = sum(if_any(.cols = all_of(environment_items),\n                                              .fns = ~.x == \"Unable to assess\",\n                                              na.rm = TRUE)),\n    ri_patient_assess =  sum(if_any(.cols = all_of(patient_assessment_items),\n                             .fns = ~.x == \"Unable to assess\"), na.rm = TRUE),\n    ri_refer_svcs_specify = sum(r_refer_svcs == 1, na.rm = TRUE),\n    ri_reflection_notes = sum(ri_reflection == 1, na.rm = TRUE)\n  ) %>% tidyr::pivot_longer(everything(), names_to = \"text_box_items\", \n                      values_to = \"totals\") %>%\n  mutate(\n    totals = case_when(totals == 0 ~ NA,\n    TRUE ~ totals\n    )\n  )\n\n\ntb_summary <- utp_pd %>% select(record_id, all_of(text_boxes)) %>%\n  mutate(\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ case_when(\n        is.na(.x) ~ \"No\",\n        TRUE ~ \"Yes\"\n      )\n    ),\n    across(\n      .cols = all_of(text_boxes),\n      .fns = ~ factor(.x, levels = c(\"Yes\", \"No\"))\n    )    \n  ) %>%\n  # Convert to long format from long format so all text box item names are in one\n  # column and all values are in another column\n  tidyr::pivot_longer(!record_id, names_to = \"text_box_items\", \n                      values_to = \"filled\") %>%\n  # Summarize with count for each text box item\n  reframe(\n    text_box_items, filled, \n    count = n(),\n    .by = c(text_box_items, filled)\n  ) %>% distinct() %>% arrange(text_box_items, filled) %>% \n  left_join(total_count, by = \"text_box_items\") %>% \n  group_by(text_box_items) %>%\n  mutate(\n    count = case_when(\n      n() == 1 & is.na(totals) & filled == \"No\" ~ totals,\n      n() == 2 & count > totals & filled == \"No\" ~ totals - count[1],\n      TRUE ~ count\n    ) \n  ) %>%\n  ungroup() %>%\n  # Include count for factor levels that have zero counts\n  tidyr::complete(text_box_items, filled) %>%\n  # mutate(count = tidyr::replace_na(count, 0)) %>%\n  # Add percent\n  mutate(\n    Percent = (count/sum(count) * 100) %>% round(0) %>% \n      tidyr::replace_na(., 0) %>% paste0(\"%\"),\n    .by = text_box_items\n  ) %>% left_join(var_desc, by = c(\"text_box_items\" = \"variable\")) %>%\n  select(label, filled, count)\n\nformatted_flex(tb_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = tb_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n\n```{r, echo = FALSE}\n#| title: Abuse Type Question Completion\n\n# Set header labels\nh_list <- list(label = \"Suspected EM type\", percent = \"Percent\",\n               count = \"Count\")\n\n\nat_summary <- utp_pd %>% select(record_id, suspect_em, all_of(em_type)) %>%\n  filter(suspect_em == 1) %>%\n  tidyr::pivot_longer(!c(record_id, suspect_em), names_to = \"em_types\", \n                      values_to = \"checked\") %>%\n  group_by(em_types) %>%\n  reframe(\n    em_types,\n    checked,\n    total = n(),\n    count = sum(checked),\n    percent = (count/total * 100) %>% round(0) %>% paste0(\"%\")\n  ) %>% ungroup() %>% left_join(var_desc, by = c(\"em_types\" = \"variable\")) %>%\n  select(label, count, percent) %>%\n  distinct()\n \n\nformatted_flex(at_summary, h_list) %>% \n  # Merge screening items column groups\n  merge_custom(x = at_summary$label, columns = 1) %>%\n  valign(j = 1, valign = \"top\")\n```\n\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"detect_tool_pilot_dashboard.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","page-layout":"custom","title":"DETECT Tool Pilot","scrolling":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}