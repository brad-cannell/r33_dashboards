{"title":"Clinician Screening Tracker Data","markdown":{"headingText":"Clinician Screening Tracker Data","containsRefs":false,"markdown":"Total patients seen by clinicians: 8003\nTotal eligible appointments: 9121  \nTotal screened appointments: 5210\nTotal screened patients that will be contacted for recruitment: 4863\nTotal recruited patients that will be interviewed: 180\n\nThe details for the variables created using this file are contained here: <https://uthtmc.sharepoint.com/:w:/r/sites/SPHDETECT-RPC/Shared%20Documents/DETECT-RPC%20R61%20R33%202022/0_data_folders/02_dashboards/00_documentation/03_r33_dashboards_implementation_planning_notes.docx.docx?d=we1c72482657342aea35ede2de4e980a0&csf=1&web=1&e=nUY12K>\n\n```{r}\nlibrary(dplyr)\nlibrary(here)\nlibrary(tidyr, include.only = c(\"separate_wider_delim\", \"crossing\"))\nlibrary(ids)\nlibrary(randomNames)\nlibrary(generator, include.only = \"r_phone_numbers\")\n```\n\n## Unique MRNs and Dyad IDs\n```{r, include=FALSE}\n# MRNs\nset.seed(1)\nmrn <- ids::random_id(8003, 4)\n```\n\n```{r}\n# Dyad IDs\nset.seed(123)\ndyad_id <- ids::random_id(8003, 3)\n```\n\n```{r}\n# Combine MRNs and Dyad IDs\nmrn_dyad_ids <- data.frame(mrn, dyad_id, mrn_dyad_join = c(1:8003))\n```\n\n```{r}\n# MRN Dyad join column for full mock data\n\nset.seed(1)\nmrn_dyad_join_data <- sample(\n  c(1:8003, sample(c(1:8003), size = (13158 - 8003), replace = TRUE)))\n```\n\n## Visit dates\n```{r, include = FALSE}\ndates <- data.frame(dates = seq(as.Date('2024-07-01'), as.Date('2026-07-01'), by = \"day\")) \ntimes <- c(paste0(9:17, \":00:00\"), paste0(9:17, \":30:00\"))\n\nvisit_date_time <- tidyr::crossing(dates, data.frame(times)) %>% \n  mutate(\n    visit_date = as.POSIXct(paste0(dates, times))\n  ) %>% select(visit_date)\n```\n\n## Physician and clinics\n```{r, include = FALSE}\nclincs_phys <- read.csv(here::here(\"data\", \"clinics_physicians.csv\")) %>%\n  mutate(phys_join = c(1:68))\n\n```\n\n```{r}\n# Physician join column for full mock data\n\nset.seed(2)\nphys_join_data <- sample(\n  c(1:68, sample(c(1:68), size = (13158 - 68), replace = TRUE)))\n```\n\n## Screened assignments\n```{r}\nset.seed(23)\n# 2906 of all 5087 eligible patients are screened\nscreened_op <- sample(c(rep(1, 2001), sample(c(0,1), size = 11157, replace = TRUE)))\n```\n\n## Create full mock data set\n\n### Add ids, clinician data and appointment times\n\n```{r, include=FALSE}\ndata_app <- visit_date_time %>% arrange(visit_date) %>%\n  mutate(\n    mrn_dyad_join = mrn_dyad_join_data,\n    phys_join = phys_join_data\n  ) %>% \n  # Combine with mrn dyad ID data\n  left_join(., mrn_dyad_ids, by = \"mrn_dyad_join\") %>%\n  # Combine with physician data\n  left_join(., clincs_phys, by = \"phys_join\") %>%\n  select(mrn, dyad_id, visit_date, clinic_name, name_full_phys)\n```\n\n### Add eligibility and screened status\n```{r}\nclin_data <- data_app %>% \n  group_by(mrn) %>%\n  arrange(visit_date) %>%\n  mutate(\n    visit_no = row_number(),\n    # Arbitrarily assign eligibility for alternating visits (odd vs even)\n    eligible = case_when(\n      visit_no %% 2 == 1  ~ 1,\n      visit_no %% 2 == 0  ~ 0\n    )\n  ) %>% \n  ungroup() %>%\n  mutate(\n    screened = case_when(\n      eligible == 1 ~ screened_op,\n      TRUE          ~ NA\n    )\n  )\n```\n\n\n# Recruiting and Scheduling Tracker\n\n## Screened Patients to be Recruited\n```{r, include=FALSE}\n# Filter screened patients from clinician tracker data\nscr_pat <- clin_data %>% filter(screened == 1) %>% select(dyad_id) %>% \n  unique()\n\n\n# Size of pool that can be contacted for recruitment\nrec_n <- nrow(scr_pat)\n\n# Create join ID\nset.seed(4)\njoin_id <- sample(1:rec_n)\n\nscr_pat <- data.frame(dyad_id = scr_pat, join_id)\n```\n\n\n```{r}\n# Create call date times (weekdays only)\ndates <- data.frame(dates = seq(as.Date('2026-09-01'), as.Date('2027-05-30'), by = \"day\")) \ntimes <- c(paste0(9:17, \":00:00\"), paste0(9:17, \":30:00\"), paste0(9:17, \":15:00\"))\n\nweekends <- c(\"Saturday\", \"Sunday\")\n\n# create combinations of data and time, de-duplicate and sort\ncall_date_time <- tidyr::crossing(dates, data.frame(times)) %>% \n  mutate(\n    call_date_time = as.POSIXct(paste0(dates, times))\n  ) %>% select(call_date_time) %>%\n  # Filter out weekends\n  filter(!weekdays(call_date_time) %in% weekends) %>%\n  slice(1:rec_n) %>%\n  mutate(\n    join_id = 1:rec_n\n)\n```\n\n\n## Create recruiter IDs\n\n```{r}\nall_rec <- paste0(\"rec\", 1:4)\n\nrec_id <- sample(c(rep(all_rec, 60), sample(x = all_rec, size = (rec_n-240), replace = TRUE)))\n```\n\n```{r}\nrec_data <- scr_pat %>% right_join(., call_date_time, by = 'join_id') %>%\n  mutate(\n    rec_id = rec_id\n  ) %>% arrange(call_date_time)\n```\n\n## Create mock data for each call log variable\n```{r}\nsample_op <- function(options){\n  sample(options, size = rec_n, replace = TRUE)\n}\n```\n\n```{r}\n# Answered status\nset.seed(4)\nanswered <- sample(c(rep(\"No answer/ busy sign\", 750), rep(\"Participant answered\", 953), rep(\"Voicemail\", 904),\n              rep(\"Wrong number\", 124), rep(\"Someone else answered\", 753)), size = rec_n, replace = TRUE)\n\n# Phone numbers\nset.seed(3)\nparticipant_phone_number <- r_phone_numbers(n = rec_n)\n\n# Text box mock entries\nset.seed(1)\nother_op <- sample(c(paste0(\"Some explanation_\",1:10 ), paste0(\"Another explanation_\", 1:18),                        \n                     paste0(\"A different explanation_\", 1:7)), size = rec_n, replace = TRUE)\n\n# Comments mock entries\nset.seed(2)\ncomments <- sample(c(paste0(\"Some comment_\",1:10 ), paste0(\"Another comment_\", 1:18), \n                      paste0(\"A different comment_\", 1:7), rep(NA, 3005)), size = rec_n, replace = TRUE)\n```\n\n\n```{r}\nset.seed(1)\ncall_data <- data.frame(rec_data, participant_phone_number, answered) %>%\n  mutate(\n    left_message = case_when(\n      answered == \"No answer/ busy sign\" ~ sample_op(\n        c(\"Left message\", \"Unable to leave message\")), \n      answered == \"Voicemail\"            ~ sample_op(\n        c(\"Left message\", \"Unable to leave message\")),\n      TRUE                               ~ NA\n    ),\n    no_message = case_when(\n      left_message == \"Unable to leave message\" ~ sample_op(\n        c(\"Voicemail box is full\", \"No voicemail box set up\", \"Other\")),\n      TRUE                 ~ NA\n    ),\n    no_message_other = case_when(\n      no_message == \"Other\" ~ other_op,\n      TRUE                  ~ NA\n    ),\n    answered_someone_else = case_when(\n      answered == \"Someone else answered\" ~ sample_op(\n        c(\"A spouse or partner\", \"An ex spouse or partner\", \n          \"A parent or step-parent\",\n          \"A brother or sister\", \"A son or daughter\", \"Another relative\", \n          \"A coworker\", \"A neighbor\", \"A friend\", \"Some other non-relative\", \n          \"Donâ€™t know\")\n      ),\n      TRUE                                ~ NA\n    ),\n    participant_contacted = case_when(\n      answered == \"Someone else answered\" ~ sample_op(\n        c(\"Participant contacted\", \"Participant not contacted\")),\n      TRUE                                ~ NA\n    ),\n    pc_no_result = case_when(\n      participant_contacted == \"Participant not contacted\" ~ sample_op(\n        c(\"Scheduled call back\", \"Unable to schedule callback\")\n      ),\n      TRUE                          ~ NA\n    ),\n    call_back_date_time = case_when(\n      pc_no_result == \"Scheduled call back\" ~ call_date_time + lubridate::days(2),\n      TRUE                                  ~ NA\n    ),\n    # Remove weekends\n    call_back_date_time = case_when(weekdays(call_back_date_time) %in% weekends ~ \n      call_back_date_time + lubridate::days(2),\n      TRUE ~ call_back_date_time),\n    call_back_phone_number = case_when(\n      pc_no_result == \"Scheduled call back\" ~ participant_phone_number,\n      TRUE                                  ~ NA \n    ),\n    call_back_no = case_when(\n      pc_no_result == \"Unable to schedule callback\" ~ sample_op(\n        c(\"Person refused\", \"Language barrier\", \"Person hung up\",\n          \"Participant impaired or disabled\", \"Participant deceased\",\n          \"Participant not available\", \"Other\")\n      ),\n      TRUE                                          ~ NA\n    ),\n    call_back_no_other = case_when(\n      call_back_no == \"Other\" ~ other_op,\n      TRUE                    ~ NA\n    ),\n    pc_yes_result = case_when(\n      answered == \"Participant answered\" | \n        participant_contacted == \"Participant contacted\" ~ \n        sample_op(\n          c(\"Interview scheduled\", \"Interview not scheduled\")\n        )\n    ),\n    interview_not_scheduled = case_when(\n      pc_yes_result == \"Interview not scheduled\" ~ sample_op(\n        c(\"Participant refused/ hung up\", \"Participant is not eligible\")\n      ),\n      TRUE                                       ~ NA\n    ),\n    ineligible = case_when(\n      interview_not_scheduled == \"Participant is not eligible\" ~ sample_op(\n        c(\"Cannot speak/read English or Spanish\", \n          \"Unwilling/unable to give consent\")\n      ),\n      TRUE                                                     ~ NA\n    ),\n    comments = comments\n  ) %>% select(-c(join_id))\n```\n\n\n## Create a df with 1800 unique participants \n- 360 is 20% of this \n- Each participant in a previous call log was called an average of 1.7 times.\n```{r}\n# Split the data in half so that the first half has 1800 patients and a sample of the second half will have 1260\nsecond_call <- call_data %>%\n  mutate(\n    second_call = case_when(\n      pc_no_result == \"Scheduled call back\" ~ 1,\n      answered == \"No answer/ busy sign\"    ~ 1,\n      TRUE                                  ~ 0\n    )\n  )\n\n# Filter 1260 participants for a second call and 540 of that (1800 - 1260) for only one call.\nset.seed(6)\nscall_y <- second_call %>% filter(second_call == 1) %>% slice_sample(n = 1260)\nscall_n <- second_call %>% filter(second_call == 0) %>% slice_sample(n = 540) \n\n# Dyad_ids for participants that will receive a second call\nscall_y_id <- scall_y %>% select(dyad_id, call_back_date_time, call_date_time) %>% \n  rename(new_id = dyad_id, \n         new_call_time = call_back_date_time,\n         first_call_time = call_date_time)\n\n# Calls that will be converted to second calls\nyes_call <- second_call %>% \n  filter(second_call == 0 & !(dyad_id %in% scall_n$dyad_id)) %>% \n  slice_sample(n = 1260) %>% cbind(., scall_y_id) %>%\n  # Set call time to be call back time of first call and set new id to dyad id\n  mutate(\n    dyad_id = new_id,\n    call_date_time = case_when(\n      is.na(new_call_time) == FALSE ~ new_call_time,\n      TRUE                          ~ first_call_time + lubridate::days(3)\n    ),\n    # Remove weekends\n    call_date_time = case_when(weekdays(call_date_time) %in% weekends ~ \n      call_date_time + lubridate::days(2),\n      TRUE ~ call_date_time)\n  ) %>%\n  select(-c(new_id, new_call_time, first_call_time))\n  \n\nrec_raw_data <- rbind(scall_y, scall_n, yes_call) %>% arrange(call_date_time) %>% select(-c(second_call))\n\n```\n\n# Save data\n```{r}\n# Save clinician tracking data\nsaveRDS(clin_data, here::here(\"data\", \"clinician_tracker_mock_data_raw.rds\"))\n```\n\n```{r}\n# Save recruitment and scheduling data\nsaveRDS(rec_raw_data, here::here(\"data\", \"recruitment_and_scheduling_mock_data_raw.rds\"))\n```\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../assets/custom_style.css"],"toc":true,"output-file":"01_mock_data_creation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","page-layout":"full","theme":["cosmo","../../assets/custom_style.css"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}